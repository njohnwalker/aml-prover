***(
File Defining useful AML theories and
the input theory for the prover

  any Symbols in the theory must be declared as a constant operator:
  op userSymbol : -> Symbol .

  The default hypotheses for the prover are expected to be defined:
  op userTheoryAxioms : -> PatternList .
  eq userTheoryAxioms = ... HERE ...
  )


****************************
*** AML EXAMPLE THEORIES ***
****************************
fmod AML-DEFINEDNESS is including AML .
    pr PATTERN-LIST .
*** Definedness Axioms
    op definednessAxioms : -> PatternList .
    eq definednessAxioms = definedness functionalConstant(def) functionalApplication .

    *** Definedness Symbol
    op def : -> Symbol [ctor] .

    *** Axiom
    op definedness : -> Pattern .
    eq definedness = def @ evar('x) .

    *** Definedness Sugar ***
    vars P P' : Pattern .

    *** Totality (definedness dual) Pattern Sugar .
    op tot : Pattern -> Pattern .
    eq tot(P:Pattern) = ~ (def @ (~ P:Pattern)) .

    *** Equality Pattern Sugar
    op eq : Pattern Pattern -> Pattern .
    eq eq(P, P') = tot(P <--> P') .

    *** Set inclusion Pattern Sugar
    op inc : Pattern Pattern -> Pattern .
    eq inc(P, P') = tot(P --> P') .

    *** Membership Pattern Sugar
    op mem : Pattern Pattern -> Pattern .
    eq mem(X:Pattern, P) = def @ (X:Pattern /\ P) .

    *** Axiom Helper
    op functionalConstant : Symbol -> Pattern .
    eq functionalConstant(S:Symbol) = (exists evar('z) . eq(S:Symbol, evar('z))) .

    *** Axiom
    op functionalApplication : -> Pattern .
    eq functionalApplication = (exists evar('z) . eq(evar('x) @ evar('y), evar('z))) .
endfm

fmod AML-MSA is including AML-DEFINEDNESS .
    protecting PRETTY .

    *** Many-sorted-algebra axioms
    op manySortedAlgebraAxioms : -> PatternList .
    eq manySortedAlgebraAxioms = definednessAxioms functionalConstant(inh) .

    *** Inhabitants Symbol
    op inh : -> Symbol [ctor] .

    *** Axiom Helper
    vars P : Pattern .
    op nonEmptySort : Pattern -> Pattern .
    eq nonEmptySort(P) = ~ eq(inh @ P, bot) .

    *** Sort Symbol
    op Sort : -> Symbol [ctor] .

    *** Axiom Helper
    var S : Symbol .
    op isSort : Symbol -> Pattern .
    eq isSort(S) = mem(S, Sort) .

    *** Axiom Helper
    var F : Symbol .
    var PS : NePatternList .
    op functionSort : Symbol NePatternList -> Pattern .
    eq functionSort(F, PS) = $functionSort(0, F, PS) .

    var N : Nat .
    op $functionSort : Nat Symbol NePatternList -> Pattern .
    eq $functionSort(N, F, P) = exists evar('y) .
      (mem(evar('y), inh @ P) /\ eq(applyXVars(F, N), evar('y))) .
    eq $functionSort(N, F, P PS) =
        mem(evar(qid("x" + string(pretty(N)))), inh @ P) --> $functionSort(s N, F, PS) .

    op applyXVars : Symbol Nat -> Pattern .
    eq applyXVars(F, 0) = F .
    eq applyXVars(F, s N) = applyXVars(F, N) @ evar(qid("x" + string(pretty(N)))) .

    *** Sorted Quantification Sugar
    var V : Var .
    ops exists_:_._ forall_:_._ : Var Symbol Pattern -> Pattern .
    eq exists V : S . P = exists V . (mem(V, inh @ S) /\  P) .
    eq forall V : S . P = forall V . (mem(V, inh @ S) --> P) .
endfm

fmod AML-NAT0 is including AML-MSA .
*** Natural Number theory sans induction axioms
    op nat0Axioms : -> PatternList .
    eq nat0Axioms =
        *** previous axioms
        manySortedAlgebraAxioms
        *** Sort axioms
        isSort(Nat) nonEmptySort(Nat)
        *** Functional Symbols
        functionalConstant(succ) functionalConstant(plus) functionalConstant(mult)
        *** Function signatures
        functionSort(z, Nat)
        functionSort(succ, Nat Nat)
        functionSort(plus, Nat Nat Nat)
        functionSort(mult, Nat Nat Nat)
        *** Function axioms
        (forall evar('a) : Nat . eq(plus @ evar('a) @ z, evar('a) ))
        (forall evar('a) : Nat . forall evar('b) : Nat .
          eq(plus @ evar('a) @ (succ @ evar('b)), succ @ (plus @ evar('a) @ evar('b))))

        (forall evar('a) : Nat . eq(mult @ evar('a) @ z, z))
        (forall evar('a) : Nat . forall evar('b) : Nat .
          eq(mult @ evar('a) @ (succ @ evar('b)),
             plus @ evar('a) @ (mult @ evar('a) @ evar('b)))) .

    *** Sort Symbol
    op Nat : -> Symbol [ctor] .

    *** Constant Symbol
    op z : -> Symbol [ctor] .

    *** Functional Constant Symbols
    ops succ plus mult : -> Symbol [ctor] .
endfm

mod AML-USER-THEORY is inc AML-NAT0 .
    op / : -> Symbol .
    op userTheoryAxioms : -> PatternList .
    eq userTheoryAxioms = nat0Axioms .
endm