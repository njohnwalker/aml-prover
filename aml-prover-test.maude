in aml.maude

view ProverCMD from TRIV to AML-PROVER-COMMANDS is sort Elt to ProverCMD . endv

*** Module of functions useful for chaining together prover commands to
*** create executable interactive proofs
mod EXECUTE-PROOF is
    including AML-PROVER .
    including LIST{ProverCMD} *
        ( sort List{ProverCMD} to CmdList
        , sort NeList{ProverCMD} to NeCmdList ) .

    *** Execute a list of prover commands in sequence
    *** starting with the empty ProofState
    op execInteractiveProof : CmdList -> ProofState .
    eq execInteractiveProof(CmdList) = $execInteractiveProof(CmdList, .ProofState) .

    op $execInteractiveProof : CmdList ProofState -> CommandResult .
    eq $execInteractiveProof(nil, ProofState) = ProofState .
    ceq $execInteractiveProof(Cmd CmdList, ProofState) =
        $execInteractiveProof(CmdList, rewriteProofState(ProofState'))
      if ProofState' := applyCommand(Cmd, ProofState) .

    ceq $execInteractiveProof(Cmd CmdList, ProofState) =
        $execInteractiveProof(CmdList, rewriteProofState(ProofState'))
      if [ ProofState' # OUT:QidList ] := applyCommand(Cmd, ProofState) .

    ceq $execInteractiveProof(Cmd CmdList, ProofState) = OUT:QidList
      if OUT:QidList := applyCommand(Cmd, ProofState) .

    op error_ : String ~> Bool [format (r o d)] .

    op toString : NeQidList -> String .
    var Q : Qid . var Qs : NeQidList .
    eq toString(Q) = string(Q) .
    eq toString(Q Qs) = string(Q) + " " + toString(Qs) .

    *** - Execute a list of proof commands
    *** - check if the proof ends with a proved goal
    *** - send the proof to the proof checker
    *** Returns True if proof is valid, False otherwise
    op execAndCheckProof : CmdList ~> Bool .
    ceq execAndCheckProof(CmdList) = B:[Bool]
      if ProofState ^ goals(GM) ^ hilbertProof(Proof) :=
          execInteractiveProof(CmdList)
      /\ Pi1 PrStep := Proof
      /\ ClaimId WfId Rl ; := stripComments(PrStep)
      /\ GM' ; [M (I): proved(P, WfId, ClaimId) ] ; GM'' := GM
      /\ B:[Bool] := check(Proof) .
    ceq execAndCheckProof(CmdList) = error toString(OUT:QidList)
      if OUT:QidList := execInteractiveProof(CmdList) .
    eq execAndCheckProof(CmdList) = error "No goal proved" [owise] .

    vars M N I : Nat .
    var P : Pattern .
    vars ProofState  ProofState' : ProofState .
    vars Pi1 Proof : CommentedProof .
    var PrStep : CommentedProofStep .
    vars WfId ClaimId : Id .
    var Rl : AMLRule .
    vars GM GM' GM'' : GoalMap .
    var Cmd : ProverCMD . var CmdList : CmdList .
endm

mod EXECUTE-PROOF-LEMMA is including AML-PROVER .
    op initstate : -> ProofState .
    eq initstate = applyCommand(begin proof of bot, .ProofState) .

    op check : ProofState ~> Bool .
    eq check(ProofState ^ hilbertProof(Proof)) = check(Proof) .
    eq check(ProofState) = false [owise] .

    op check : ProofAndIndex ~> Bool .
    eq check({Proof, Id:Id}) = check(Proof) .

    op check : ProofStateAndIndex ~> Bool .
    eq check({ProofState, Id:Id}) = check(ProofState) .

    op muTestPattern : -> Pattern .
    eq muTestPattern =
        ( mu svar('X) .
          exists evar('y) .
          (succ @ z --> bot) --> bot) .

    var Proof : CommentedProof .
    var ProofState : ProofState .
endm

mod TEST is pr EXECUTE-PROOF + EXECUTE-PROOF-LEMMA .

    sort TestResult .
    op FAILURE_ : [Bool] -> TestResult [ctor format (y o d)] .
    op Success : -> TestResult [ctor format (g d)] .

    op _ should be _ : [Bool] Bool -> TestResult .
    eq Actual should be Expected =
      if Actual == Expected
        then Success
        else FAILURE Actual
        fi .
    eq B:[Bool] should be Expected = FAILURE B:[Bool] [owise] .

    op _ should fail : [Bool] -> TestResult .
    eq Actual should fail = FAILURE Actual .
    eq Actual:[Bool] should fail = Success .

    vars PiValid PiInvalid : Proof .
    vars Expected Actual : Bool .
endm

************************************
*** BEGIN PROOF LEMMA TEST CASES ***
************************************
*** Well-formed / non-negative ocurrence of bound set variable
reduce check(
  wfPatternLemma(muTestPattern, initstate)
) should be true .

*** Not free variable occurrence
reduce check(
  notFreeLemma(evar('x), mu svar('X) . bot, initstate)
) should be true .

reduce check(
  notFreeLemma(evar('x), muTestPattern, initstate)
) should be true .

reduce check(
  notFreeLemma(
    evar('x),
    mu svar('X) . exists evar('y) . (succ @ z --> evar('x)) --> bot,
    initstate
  )
) should fail .

*** substitution assertion
red check(
  substitutionLemma(z,evar('x),z,evar('x),initstate)
) should be true .

red check(
  substitutionLemma(z,evar('y),z,evar('x),initstate)
) should fail .

red check(
  substitutionLemma(
    exists evar('y) . eq(evar('y), succ @ z ),
    exists evar('y) . eq(evar('y), succ @ z ),
    z,
    evar('y),
    initstate
  )
) should be true .

red check(
  substitutionLemma(
    exists evar('x) . z,
    exists evar('x) . evar('y),
    z,
    evar('y),
    initstate
  )
) should be true .

red check(
  substitutionLemma(
    mu svar('x) . bot,
    mu svar('x) . evar('y),
    bot,
    evar('y),
    initstate
  )
) should be true .

red check(
  substitutionLemma(
    eq(succ @ z, succ @ z ),
    eq(evar('x), succ @ z ),
    succ @ z,
    evar('x),
    initstate
  )
) should be true .

*** Application context assertion
red check(
  applicationContextLemma(
    (plus @ (z --> bot)) @ (succ @ (succ @ [])),
    initstate
  )
) should be true .

red check(
  applicationContextLemma(
     (plus @ (succ @ [])) @ (succ @ (z --> bot)),
    initstate
  )
) should be true .

*****************************
*** PROOF RULE TEST CASES ***
*****************************

*** PropF proof
reduce execAndCheckProof(
(begin proof of ((bot --> bot) --> bot) --> bot)
(propF bot)
(assert)
) should be true .

*** SK calculus proof of tautology `_|_ -> _|_`
reduce execAndCheckProof(
(begin proof of bot --> bot)
(propK bot bot)
(propK bot (bot --> bot))
(propS bot (bot --> bot) bot)
(modus ponens (bot --> (bot --> bot) --> bot) ((bot --> bot --> bot) --> bot --> bot))
(modus ponens (bot --> bot --> bot) (bot --> bot))
(assert)
) should be true .

*** SK calculus proof of tautology `_|_ -> _|_`
*** Pattern pattern matching for Modus Ponens
reduce execAndCheckProof(
(begin proof of bot --> bot)
(propK bot bot)
(propK bot bot --> bot)
(propS bot bot --> bot bot)
(modus ponens P:Pattern Q:Pattern)
(modus ponens P:Pattern (bot --> bot))
(assert)
) should be true .

reduce execAndCheckProof(
(begin proof of bot --> bot)
(propK bot bot)
(modus ponens P:Pattern Q:Pattern)
(assert)
) should fail .

*** Top quantification
reduce execAndCheckProof(
(begin proof of exists evar('y) . top)
(existence 'x)
(existential quantifier 'y top)
(modus ponens P:Pattern Q:Pattern)
(assert)
) should be true .

*** Generalization
reduce execAndCheckProof(
(begin proof of (exists evar('x) . bot) --> bot)
(propI bot)
(existential generalization 'x P:Pattern P:Pattern)
(assert)
) should be true .

*** Propagation
  *** _|_
reduce execAndCheckProof(
(begin proof of bot @ z --> bot)
(left bot propagation z)
(assert)
) should be true .

reduce execAndCheckProof(
(begin proof of succ @ bot --> bot)
(right bot propagation succ)
(assert)
) should be true .

  *** \/
reduce execAndCheckProof(
(begin proof of (succ \/ succ @ succ) @ z --> (succ @ z \/ succ @ succ @ z))
(left or propagation z succ (succ @ succ))
(assert)
) should be true .

reduce execAndCheckProof(
(begin proof of succ @ (z \/ succ @ z) --> (succ @ z \/ succ @ (succ @ z)))
(right or propagation succ z (succ @ z))
(assert)
) should be true .

  *** âˆƒ
reduce execAndCheckProof(
(begin proof of (exists evar('x) . evar('x)) @ z --> (exists evar('x) . evar('x) @ z))
(left existential propagation z evar('x) evar('x))
(assert)
) should be true .

reduce execAndCheckProof(
(begin proof of succ @ top --> (exists evar('x) . succ @ evar('x)))
(right existential propagation succ evar('x) evar('x))
(assert)
) should be true .

*** Framing
reduce execAndCheckProof(
(begin proof of succ @ z --> succ @ z)
(propI succ)
(left framing z P:Pattern P:Pattern)
(assert)
) should be true .

reduce execAndCheckProof(
(begin proof of succ @ z --> succ @ z)
(propI z)
(right framing succ P:Pattern P:Pattern)
(assert)
) should be true .

*** Set Variable Substitution
reduce execAndCheckProof(
(begin proof of z --> z)
(propI svar('X))
(set variable substitution 'X P:Pattern z)
(assert)
) should be true .

*** Pre-fixpoint
reduce execAndCheckProof(
(begin proof of
  ((z --> bot) --> succ @ (mu svar('X) . (z --> bot) --> succ @ svar('X)))
  --> (mu svar('X) . (z --> bot) --> succ @ svar('X)))
(pre fixpoint 'X succ @ svar('X) \/ z)
(assert)
) should be true .

*** Knaster-Tarski
reduce execAndCheckProof(
(begin proof of
  (mu svar('Y) . svar('Y)) --> (z --> bot) --> succ @ svar('X))
(propI succ @ svar('X) \/ z)
(knaster tarski 'Y svar('Y) P:Pattern)
(assert)
) should be true .

*** Existence axiom (top)
reduce execAndCheckProof(
(begin proof of top)
(existence 'x)
(assert)
) should be true .

*** Singleton
reduce execAndCheckProof(
(begin proof of
    succ @ ((evar('x) --> (z --> bot) --> bot) --> bot) -->
    plus @ (bot --> bot) @ ((evar('x) --> z --> bot) --> bot)
        --> bot )
(singleton succ @ [] plus @ (bot --> bot) @ [] 'x z --> bot)
(assert)
) should be true .

quit
